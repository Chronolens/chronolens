//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "media")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub user_id: String,
    pub preview_id: Option<String>,
    pub hash: String,
    pub created_at: i64,
    pub last_modified_at: i64,
    pub deleted: bool,
    pub file_size: i64,
    pub file_name: String,
    #[sea_orm(column_type = "Double", nullable)]
    pub longitude: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub latitude: Option<f64>,
    pub image_width: Option<i32>,
    pub image_length: Option<i32>,
    pub make: Option<String>,
    pub model: Option<String>,
    pub fnumber: Option<String>,
    pub exposure_time: Option<String>,
    pub photographic_sensitivity: Option<String>,
    pub orientation: Option<i32>,
    #[sea_orm(column_type = "custom(\"vector\")", nullable)]
    pub clip_embeddings: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::face::Entity")]
    Face,
    #[sea_orm(has_many = "super::media_face::Entity")]
    MediaFace,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::face::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Face.def()
    }
}

impl Related<super::media_face::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaFace.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
